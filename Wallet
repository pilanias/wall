import time
from concurrent.futures import ThreadPoolExecutor
from eth_account import Account
from web3 import Web3

# Define the number of wallets to generate
num_wallets = 1000

# Connect to an Ethereum node
w3 = Web3(Web3.HTTPProvider('https://side-billowing-field.discover.quiknode.pro/fe31c15caf12efff9a326afac2670903fa5ab626'))

# Measure the start time
start_time = time.time()

# Generate a list of new Ethereum wallets
wallets = [Account.create() for _ in range(num_wallets)]

# Define a function to check the balance of an Ethereum address
def check_balance(address):
    balance = w3.eth.get_balance(address)
    return balance / 10 ** 18

# Use multi-threading to check the balance of each wallet
with ThreadPoolExecutor() as executor:
    futures = [executor.submit(check_balance, wallet.address) for wallet in wallets]
    results = [future.result() for future in futures]

# Measure the end time
end_time = time.time()

# Save the address, master private key, and balance of each wallet with a non-zero balance to a file
with open('main.txt', 'w') as f:
    for i, wallet in enumerate(wallets):
        if results[i] > 0:
            f.write(f"Wallet {i}:\n")
            f.write(f"Master Private Key: {wallet._key_obj.to_hex()}\n")
            f.write(f"Address: {wallet.address}\n")
            f.write(f"Balance: {results[i]} ETH\n\n")

            # Print the address, master private key, and balance for debugging purposes
            print(f"Wallet {i}:")
            print(f"Master Private Key: {wallet._key_obj.to_hex()}")
            print(f"Address: {wallet.address}")
            print(f"Balance: {results[i]} ETH")
            print()

# Calculate and print the elapsed time in seconds
elapsed_seconds = end_time - start_time
print(f"Elapsed time: {elapsed_seconds} seconds")
